#pragma kernel CSMain

RWTexture2D<float4> Result;
int textureSize;
int numOutScatteringSteps;
float atmosphereRadius;
float avgDensityHeight01;
float densityFalloff;
float4 params;

static const float PI = 3.14159265359;
static const float TAU = PI * 2;
static const float maxFloat = 3.402823466e+38;

float remap(float v, float minOld, float maxOld, float minNew, float maxNew) {
    return saturate(minNew + (v-minOld) * (maxNew - minNew) / (maxOld-minOld));
}

float4 remap(float4 v, float minOld, float maxOld, float minNew, float maxNew) {
    return saturate(minNew + (v-minOld) * (maxNew - minNew) / (maxOld-minOld));
}

float remap01(float v, float minOld, float maxOld) {
    return saturate((v-minOld) / (maxOld-minOld));
}

float2 remap01(float2 v, float2 minOld, float2 maxOld) {
    return saturate((v-minOld) / (maxOld-minOld));
}

float smoothMin(float a, float b, float k) {
    k = max(0, k);
    float h = max(0, min(1, (b - a + k) / (2 * k)));
    return a * h + b * (1 - h) - k * h * (1 - h);
}

float smoothMax(float a, float b, float k) {
    k = min(0, -k);
    float h = max(0, min(1, (b - a + k) / (2 * k)));
    return a * h + b * (1 - h) - k * h * (1 - h);
}

float Blend(float startHeight, float blendDst, float height) {
    return smoothstep(startHeight - blendDst / 2, startHeight + blendDst / 2, height);
}

float2 raySphere(float3 sphereCentre, float sphereRadius, float3 rayOrigin, float3 rayDir) {
    float3 offset = rayOrigin - sphereCentre;
    float a = 1;
    float b = 2 * dot(offset, rayDir);
    float c = dot(offset, offset) - sphereRadius * sphereRadius;
    float d = b * b - 4 * a * c;

    if (d > 0) {
        float s = sqrt(d);
        float dstToSphereNear = max(0, (-b - s) / (2 * a));
        float dstToSphereFar = (-b + s) / (2 * a);

        if (dstToSphereFar >= 0) {
            return float2(dstToSphereNear, dstToSphereFar - dstToSphereNear);
        }
    }
    return float2(maxFloat, 0);
}

float densityAtPoint(float2 densitySamplePoint) {
    float planetRadius = 1;
    float2 planetCentre = 0;

    float heightAboveSurface = length(densitySamplePoint - planetCentre) - planetRadius;
    float height01 = heightAboveSurface / (atmosphereRadius - planetRadius);
    float localDensity = exp(-height01 * densityFalloff) * (1 - height01);
    return localDensity;
}

float opticalDepth(float2 rayOrigin, float2 rayDir, float rayLength) {
    int numOpticalDepthPoints = numOutScatteringSteps;

    float2 densitySamplePoint = rayOrigin;
    float stepSize = rayLength / (numOpticalDepthPoints - 1);
    float opticalDepth = 0;

    for (int i = 0; i < numOpticalDepthPoints; i++) {
        float localDensity = densityAtPoint(densitySamplePoint);
        opticalDepth += localDensity * stepSize;
        densitySamplePoint += rayDir * stepSize;
    }
    return opticalDepth;
}

float calculateOutScattering(float2 inPoint, float2 outPoint) {
    float planetRadius = 1;
    float skinWidth = planetRadius / 1000.0;

    float lightTravelDst = length(outPoint - inPoint);
    float2 outScatterPoint = inPoint;
    float2 rayDir = (outPoint - inPoint) / lightTravelDst;
    float stepSize = (lightTravelDst - skinWidth) / (numOutScatteringSteps);
    
    float outScatterAmount = 0;

    for (int i = 0; i < numOutScatteringSteps; i++) {
        outScatterPoint += rayDir * stepSize;
        float height = length(outScatterPoint - 0) - planetRadius;
        float height01 = saturate(height / (atmosphereRadius - planetRadius));
        outScatterAmount += exp(-height01 * densityFalloff) * stepSize;
    }

    return outScatterAmount;
}

[numthreads(8,8,1)]
void CSMain(uint2 id : SV_DispatchThreadID)
{
    const float planetRadius = 1;

    float2 uv = id / (float)textureSize;
    float height01 = uv.y;
    float angle = uv.x * PI;
    float2 dir = float2(sin(angle), cos(angle));
    float y = -2 * uv.x + 1;
    float x = sin(acos(y));
    dir = float2(x,y);
    
    float2 inPoint = float2(0, lerp(planetRadius, atmosphereRadius, height01));
    float dstThroughAtmosphere = raySphere(0, atmosphereRadius, float3(inPoint,0), float3(dir,0)).y;
    float2 outPoint = inPoint + dir * raySphere(0, atmosphereRadius, float3(inPoint,0), float3(dir,0)).y;
    float outScattering = opticalDepth(inPoint + dir * 0.0001, dir, dstThroughAtmosphere-0.0002);

    Result[id.xy] = outScattering;
}
